<?php

namespace Tests\Feature\Http\Requests;

use App\Http\Requests\ProductStoreRequest;
use Database\Seeders\CategorySeeder;
use Database\Seeders\CountrySeeder;
use Database\Seeders\StatusSeeder;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Str;
use Tests\TestCase;

class ProductUpdateRequestTest extends TestCase
{
    use RefreshDatabase;
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->seed(CountrySeeder::class);
        $this->seed(StatusSeeder::class);
        $this->seed(CategorySeeder::class);
    }

    /**
     * @dataProvider badData
     */
    public function test_bad_data($name,$description,$category_id,$country_id,$status_id)
    {
        $request = new ProductStoreRequest();

        $data = compact('name','description','category_id','country_id','status_id');

        $validator = Validator::make($data, $request->rules());

        $this->assertFalse($validator->passes());
    }

    public static function badData(): array
    {
        return [
            ['','validstring',1,1,1],
            [1,'validstring',1,1,1],
            [true,'validstring',1,1,1],
            ['asd','validstring',1,1,1],
            [self::bigString(),'validstring',1,1,1],
            ['validstring','',1,1,1],
            ['validstring',1,1,1,1],
            ['validstring',true,1,1,1],
            ['validstring','asd',1,1,1],
            ['validstring',self::bigString(),1,1,1],
            ['validstring','validstring','',1,1],
            ['validstring','validstring',22222,1,1],
            ['validstring','validstring','adf',1,1],
            ['validstring','validstring',true,1,1],
            ['validstring','validstring',null,1,1],
            ['validstring','validstring',1,'',1],
            ['validstring','validstring',1,22222,1],
            ['validstring','validstring',1,'adf',1],
            ['validstring','validstring',1,true,1],
            ['validstring','validstring',1,null,1],
            ['validstring','validstring',1,1,''],
            ['validstring','validstring',1,1,22222],
            ['validstring','validstring',1,1,'adf'],
            ['validstring','validstring',1,1,true],
            ['validstring','validstring',1,1,null],
        ];
    }

    public static function bigString(): string
    {
        return Str::random(256);
    }
}
